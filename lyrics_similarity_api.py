# -*- coding: utf-8 -*-
"""Method 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/169LHbsXRcOcMdU7EyOjjp1P-kLSXczC6
"""

import numpy as np
import scipy.sparse
import pandas as pd
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt
from sklearn.neighbors import KDTree
import sqlite3
from tqdm import tqdm
from PIL import Image

# # colab only
# lyrics = '/content/drive/MyDrive/256 Project/Music Recommendation/TrackData.csv'
# words = '/content/drive/MyDrive/256 Project/Music Recommendation/Words.txt'
# db = '/content/drive/MyDrive/256 Project/Music Recommendation/track_metadata.db'
# encoding = '/content/drive/MyDrive/256 Project/Music Recommendation/Encodings_numpy.pickle.npy'

# local
lyrics = 'data/TrackData.csv'
words = 'data/Words.txt'
db = 'data/track_metadata.db'
encoding = 'data/Encodings_numpy.pickle.npy'

class Method1:
    
    def __init__(self, Lyrics=lyrics, Words=words, Database = db, Encodings=encoding):
        
        self.track_lyrics_df = pd.concat([chunk for chunk in tqdm(pd.read_csv(Lyrics, chunksize=1000), desc='Loading TracKIDs and Lyrics')])

        self.words = {}
        f = open(Words)
        for line in tqdm(f, desc='Loading Words'):
            words = line.split(",")
            for i, word in enumerate(words):
                self.words[i+1] = word
        
        print("Loading Track Database")
        self.db_conn = sqlite3.connect('track_metadata.db')
        
        print("Loading KDD Tree for Lyrics Similarity")
        self.enc = np.load(Encodings, allow_pickle=True)
        self.tree = KDTree(self.enc, leaf_size=40) 
        
        self.similarSongs = []
        
        print("Loading Complete.")
        
        
        
    def getLyrics(self, embeddings, words, with_count = False):
        sentence = ""
  
        embeddings = embeddings.replace("[","")
        embeddings = embeddings.replace("]","")
        embeddings = embeddings.replace("'","")
        embeddings = embeddings.replace(" ","")
        embeddings = embeddings.split(",")

        for emb in embeddings:
            ids = emb.split(":")
            sentence += words[int(ids[0])] + " "

        return sentence
    
    def getLyricsSimilarity(self, song, k=1):

            index = self.track_lyrics_df[self.track_lyrics_df['Title'] == song].index[0]
    
            _, ind = self.tree.query(self.enc[index:index+1], k=int(k)+1)
            self.similarSongs = ind[0]

            self.temp = self.track_lyrics_df[self.track_lyrics_df.index.isin(self.similarSongs)]
            for row in self.temp[['Title','Artist name']].values:
                print("Song:",row[0],", Artist:",row[1])        
        
    def RecommendSongs(self, song, k=5):
        self.getLyricsSimilarity(song, int(k))
    
    def LyricCloud(self):
        
        if len(self.similarSongs) == 0:
            print("Choose Song..")
            self.RecommendSongs()
            
        temp = pd.DataFrame()
        temp['Sentence'] = self.temp['Lyrics'].apply(lambda x: self.getLyrics(x, self.words))
        stopwords = set(STOPWORDS)
        comment_words = ""

        # iterate through the csv file
        for val in temp.Sentence:

            # typecaste each val to string
            val = str(val)

            # split the value
            tokens = val.split()

            # Converts each token into lowercase
            for i in range(len(tokens)):
                tokens[i] = tokens[i].lower()

            comment_words += " ".join(tokens)+" "
            
        vinyl_mask = np.array(Image.open('images/vinyl.png'))
        wordcloud = WordCloud(width = 800, height = 800, mask = vinyl_mask, background_color ='white',
                              stopwords = stopwords, min_font_size = 10).generate(comment_words)
 
        plt.figure(figsize = (5, 5), facecolor = None)
        plt.imshow(wordcloud)
        # plt.axis("off")
        plt.savefig('/content/wordcloud.png')
        plt.tight_layout(pad = 0)
        plt.show()